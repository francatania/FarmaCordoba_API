// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using FarmaceuticaBack.Data.Models;
using Microsoft.EntityFrameworkCore;

namespace FarmaceuticaBack.Models;

public partial class FarmaceuticaContext : DbContext
{
    public FarmaceuticaContext(DbContextOptions<FarmaceuticaContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Barrio> Barrios { get; set; }

    public virtual DbSet<Cargo> Cargos { get; set; }

    public virtual DbSet<Ciudad> Ciudades { get; set; }

    public virtual DbSet<Cliente> Clientes { get; set; }

    public virtual DbSet<Contacto> Contactos { get; set; }

    public virtual DbSet<DetallesPedido> DetallesPedidos { get; set; }

    public virtual DbSet<Dispensacion> Dispensaciones { get; set; }

    public virtual DbSet<EmpresaLogistica> EmpresaLogisticas { get; set; }

    public virtual DbSet<Especialidad> Especialidades { get; set; }

    public virtual DbSet<Establecimiento> Establecimientos { get; set; }

    public virtual DbSet<Factura> Facturas { get; set; }

    public virtual DbSet<FacturasTiposPago> FacturasTiposPagos { get; set; }

    public virtual DbSet<Inventario> Inventarios { get; set; }

    public virtual DbSet<Laboratorio> Laboratorios { get; set; }

    public virtual DbSet<Marca> Marcas { get; set; }

    public virtual DbSet<Medicamento> Medicamentos { get; set; }

    public virtual DbSet<MedicamentosLote> MedicamentosLotes { get; set; }

    public virtual DbSet<Medico> Medicos { get; set; }

    public virtual DbSet<Monodroga> Monodrogas { get; set; }

    public virtual DbSet<ObraSocial> ObraSocials { get; set; }

    public virtual DbSet<Pais> Paises { get; set; }

    public virtual DbSet<Pedido> Pedidos { get; set; }

    public virtual DbSet<Personal> Personals { get; set; }

    public virtual DbSet<PersonalCargosEstablecimiento> PersonalCargosEstablecimientos { get; set; }

    public virtual DbSet<Presentacion> Presentaciones { get; set; }

    public virtual DbSet<Producto> Productos { get; set; }

    public virtual DbSet<Proveedor> Proveedores { get; set; }

    public virtual DbSet<Provincia> Provincias { get; set; }

    public virtual DbSet<Stock> Stocks { get; set; }

    public virtual DbSet<TiposCobertura> TiposCoberturas { get; set; }

    public virtual DbSet<TiposContacto> TiposContactos { get; set; }

    public virtual DbSet<TiposDocumento> TiposDocumentos { get; set; }

    public virtual DbSet<TiposGenero> TiposGeneros { get; set; }

    public virtual DbSet<TiposMovimiento> TiposMovimientos { get; set; }

    public virtual DbSet<TiposPago> TiposPagos { get; set; }

    public virtual DbSet<TiposProducto> TiposProductos { get; set; }

    public virtual DbSet<VReporteMensualObraSocial> VReporteMensualObraSocials { get; set; }

    public virtual DbSet<VTotalesFacturadosFarmacia> VTotalesFacturadosFarmacias { get; set; }

    public virtual DbSet<VTotalesFacturadosVendedore> VTotalesFacturadosVendedores { get; set; }

    public DbSet<SPTotalesFarmacia> SPTotalesFarmacia { get; set; }
    public DbSet<SPReporteMensualCobertura> sPReporteMensualCoberturas { get; set; }
    public DbSet<SPReportemensualObraSocial> sPReportemensualObraSociales { get; set; }
    public DbSet<SPMayoresCompras> SPMayoresCompras { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Barrio>(entity =>
        {
            entity.HasKey(e => e.IdBarrio);

            entity.ToTable("BARRIOS");

            entity.Property(e => e.IdBarrio).HasColumnName("ID_BARRIO");
            entity.Property(e => e.Barrio1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BARRIO");
            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.HasOne(d => d.IdCiudadNavigation).WithMany(p => p.Barrios)
                .HasForeignKey(d => d.IdCiudad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BARRIOS_CIUDADES");
        });

        modelBuilder.Entity<Cargo>(entity =>
        {
            entity.HasKey(e => e.IdCargo);

            entity.ToTable("CARGOS");

            entity.Property(e => e.IdCargo)
                .ValueGeneratedNever()
                .HasColumnName("ID_CARGO");
            entity.Property(e => e.Cargo1)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CARGO");
        });

        modelBuilder.Entity<Ciudad>(entity =>
        {
            entity.HasKey(e => e.IdCiudad);

            entity.ToTable("CIUDADES");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");
            entity.Property(e => e.NombreCiudad)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CIUDAD");
            entity.Property(e => e.IdProvincia).HasColumnName("ID_PROVINCIA");

            entity.HasOne(d => d.IdProvinciaNavigation).WithMany(p => p.Ciudades)
                .HasForeignKey(d => d.IdProvincia)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CIUDADES_PROVINCIAS");
        });

        modelBuilder.Entity<Cliente>(entity =>
        {
            entity.HasKey(e => e.IdCliente);

            entity.ToTable("CLIENTES");

            entity.Property(e => e.IdCliente)
                .ValueGeneratedNever()
                .HasColumnName("ID_CLIENTE");
            entity.Property(e => e.Apellido)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APELLIDO");
            entity.Property(e => e.Calle)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CALLE");
            entity.Property(e => e.FechaNacimiento).HasColumnName("FECHA_NACIMIENTO");
            entity.Property(e => e.IdBarrio).HasColumnName("ID_BARRIO");
            entity.Property(e => e.IdGenero).HasColumnName("ID_GENERO");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.NroDoc)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_DOC");
            entity.Property(e => e.Numero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("NUMERO");
            entity.Property(e => e.TipoDoc).HasColumnName("TIPO_DOC");

            entity.HasOne(d => d.IdBarrioNavigation).WithMany(p => p.Clientes)
                .HasForeignKey(d => d.IdBarrio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTES_BARRIOS");

            entity.HasOne(d => d.IdGeneroNavigation).WithMany(p => p.Clientes)
                .HasForeignKey(d => d.IdGenero)
                .HasConstraintName("FK_CLIENTES_GENEROS");

            entity.HasOne(d => d.TipoDocNavigation).WithMany(p => p.Clientes)
                .HasForeignKey(d => d.TipoDoc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTES_TIPO_DOC");
        });

        modelBuilder.Entity<Contacto>(entity =>
        {
            entity.HasKey(e => e.IdContacto);

            entity.ToTable("CONTACTOS");

            entity.Property(e => e.IdContacto).HasColumnName("ID_CONTACTO");
            entity.Property(e => e.Contacto1)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CONTACTO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstablecimiento).HasColumnName("ID_ESTABLECIMIENTO");
            entity.Property(e => e.IdLogistica)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ID_LOGISTICA");
            entity.Property(e => e.IdPersonal).HasColumnName("ID_PERSONAL");
            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");
            entity.Property(e => e.IdTipoContacto).HasColumnName("ID_TIPO_CONTACTO");

            entity.HasOne(d => d.IdLogisticaNavigation).WithMany(p => p.Contactos)
                .HasForeignKey(d => d.IdLogistica)
                .HasConstraintName("FK_CONTACTOS_EMPRESA_LOGISTICA");

            entity.HasOne(d => d.IdPersonalNavigation).WithMany(p => p.Contactos)
                .HasForeignKey(d => d.IdPersonal)
                .HasConstraintName("FK_CONTACTOS_PERSONAL");

            entity.HasOne(d => d.IdProveedorNavigation).WithMany(p => p.Contactos)
                .HasForeignKey(d => d.IdProveedor)
                .HasConstraintName("FK_CONTACTOS_PROVEEDORES");

            entity.HasOne(d => d.IdTipoContactoNavigation).WithMany(p => p.Contactos)
                .HasForeignKey(d => d.IdTipoContacto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTACTOS_TIPOS_CONTACTOS");
        });

        modelBuilder.Entity<DetallesPedido>(entity =>
        {
            entity.HasKey(e => new { e.IdPedido, e.IdDetallePedido }).HasName("PK_DETALLE_PEDIDO");

            entity.ToTable("DETALLES_PEDIDOS");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");
            entity.Property(e => e.IdDetallePedido).HasColumnName("ID_DETALLE_PEDIDO");
            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");
            entity.Property(e => e.IdMedicamentoLote).HasColumnName("ID_MEDICAMENTO_LOTE");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");
            entity.Property(e => e.PrecioUnitario)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("PRECIO_UNITARIO");

            entity.HasOne(d => d.IdMedicamentoLoteNavigation).WithMany(p => p.DetallesPedidos)
                .HasForeignKey(d => d.IdMedicamentoLote)
                .HasConstraintName("FK_DETALLE_PEDIDO_MEDICAMENTOS_LOTE");

            entity.HasOne(d => d.IdPedidoNavigation).WithMany(p => p.DetallesPedidos)
                .HasForeignKey(d => d.IdPedido)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DETALLE_PEDIDO_PEDIDO");

            entity.HasOne(d => d.IdProductoNavigation).WithMany(p => p.DetallesPedidos)
                .HasForeignKey(d => d.IdProducto)
                .HasConstraintName("FK_DETALLES_PEDIDOS_PRODUCTOS");

            entity.HasOne(d => d.IdProveedorNavigation).WithMany(p => p.DetallesPedidos)
                .HasForeignKey(d => d.IdProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DETALLES_PEDIDOS_PROVEEDORES");
        });

        modelBuilder.Entity<Dispensacion>(entity =>
        {
            entity.HasKey(e => new { e.IdFactura, e.IdDispensacion });

            entity.ToTable("DISPENSACIONES");

            entity.Property(e => e.IdFactura).HasColumnName("ID_FACTURA");
            entity.Property(e => e.IdDispensacion).HasColumnName("ID_DISPENSACION");
            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");
            entity.Property(e => e.CodigoValidacion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CODIGO_VALIDACION");
            entity.Property(e => e.Descuento)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("DESCUENTO");
            entity.Property(e => e.IdCobertura).HasColumnName("ID_COBERTURA");
            entity.Property(e => e.IdMedicamentoLote).HasColumnName("ID_MEDICAMENTO_LOTE");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.Matricula)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("MATRICULA");
            entity.Property(e => e.PrecioUnitario)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("PRECIO_UNITARIO");

            entity.HasOne(d => d.IdCoberturaNavigation).WithMany(p => p.Dispensaciones)
                .HasForeignKey(d => d.IdCobertura)
                .HasConstraintName("FK_DISPENSACIONES_COBERTURAS");

            entity.HasOne(d => d.IdFacturaNavigation).WithMany(p => p.Dispensaciones)
                .HasForeignKey(d => d.IdFactura)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DISPENSACIONES_FACTURAS");

            entity.HasOne(d => d.IdMedicamentoLoteNavigation).WithMany(p => p.Dispensaciones)
                .HasForeignKey(d => d.IdMedicamentoLote)
                .HasConstraintName("FK_DISPENSACIONES_MEDICAMENTO_LOTE");

            entity.HasOne(d => d.IdProductoNavigation).WithMany(p => p.Dispensaciones)
                .HasForeignKey(d => d.IdProducto)
                .HasConstraintName("FK_DISPENSACIONES_PRODUCTOS");

            entity.HasOne(d => d.MatriculaNavigation).WithMany(p => p.Dispensaciones)
                .HasForeignKey(d => d.Matricula)
                .HasConstraintName("FK_DISPENSACIONES_MEDICOS");
        });

        modelBuilder.Entity<EmpresaLogistica>(entity =>
        {
            entity.HasKey(e => e.Cuit);

            entity.ToTable("EMPRESA_LOGISTICA");

            entity.Property(e => e.Cuit)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CUIT");
            entity.Property(e => e.Calle)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CALLE");
            entity.Property(e => e.IdBarrio).HasColumnName("ID_BARRIO");
            entity.Property(e => e.NombreEmpresa)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_EMPRESA");
            entity.Property(e => e.Numero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("NUMERO");

            entity.HasOne(d => d.IdBarrioNavigation).WithMany(p => p.EmpresaLogisticas)
                .HasForeignKey(d => d.IdBarrio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EMPRESA_LOGISTICA_BARRIOS");
        });

        modelBuilder.Entity<Especialidad>(entity =>
        {
            entity.HasKey(e => e.IdTipoEspecialidad);

            entity.ToTable("ESPECIALIDADES");

            entity.Property(e => e.IdTipoEspecialidad)
                .ValueGeneratedNever()
                .HasColumnName("ID_TIPO_ESPECIALIDAD");
            entity.Property(e => e.NombreEspecialidad)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ESPECIALIDAD");
        });

        modelBuilder.Entity<Establecimiento>(entity =>
        {
            entity.HasKey(e => e.IdEstablecimiento).HasName("PK_ESTABLECIMIENTO");

            entity.ToTable("ESTABLECIMIENTOS");

            entity.Property(e => e.IdEstablecimiento)
                .ValueGeneratedNever()
                .HasColumnName("ID_ESTABLECIMIENTO");
            entity.Property(e => e.Calle)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CALLE");
            entity.Property(e => e.IdBarrio).HasColumnName("ID_BARRIO");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Numero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("NUMERO");

            entity.HasOne(d => d.IdBarrioNavigation).WithMany(p => p.Establecimientos)
                .HasForeignKey(d => d.IdBarrio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ESTABLECIMIENTO_BARRIOS");
        });

        modelBuilder.Entity<Factura>(entity =>
        {
            entity.HasKey(e => e.IdFactura);

            entity.ToTable("FACTURAS");

            entity.Property(e => e.IdFactura)
                .ValueGeneratedNever()
                .HasColumnName("ID_FACTURA");
            entity.Property(e => e.Fecha).HasColumnName("FECHA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdPersonalCargosEstablecimientos).HasColumnName("ID_PERSONAL_CARGOS_ESTABLECIMIENTOS");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.Facturas)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FACTURAS_CLIENTES");

            entity.HasOne(d => d.IdPersonalCargosEstablecimientosNavigation).WithMany(p => p.Facturas)
                .HasForeignKey(d => d.IdPersonalCargosEstablecimientos)
                .HasConstraintName("FK_FACTURAS_PERSONAL");
        });

        modelBuilder.Entity<FacturasTiposPago>(entity =>
        {
            entity.HasKey(e => e.IdFacturaTipoPago).HasName("PK_FACT_TIPOS_PAGOS");

            entity.ToTable("FACTURAS_TIPOS_PAGOS");

            entity.Property(e => e.IdFacturaTipoPago)
                .ValueGeneratedNever()
                .HasColumnName("ID_FACTURA_TIPO_PAGO");
            entity.Property(e => e.CantidadCuotas).HasColumnName("CANTIDAD_CUOTAS");
            entity.Property(e => e.EsCuotas).HasColumnName("ES_CUOTAS");
            entity.Property(e => e.IdFactura).HasColumnName("ID_FACTURA");
            entity.Property(e => e.IdTipoPago).HasColumnName("ID_TIPO_PAGO");
            entity.Property(e => e.PorcentajePago)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("PORCENTAJE_PAGO");

            entity.HasOne(d => d.IdFacturaNavigation).WithMany(p => p.FacturasTiposPagos)
                .HasForeignKey(d => d.IdFactura)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FACT_TIPOS_PAGOS_FACT");

            entity.HasOne(d => d.IdTipoPagoNavigation).WithMany(p => p.FacturasTiposPagos)
                .HasForeignKey(d => d.IdTipoPago)
                .HasConstraintName("FK_FACT_TIPOS_PAGOS_TIPOS_PAGOS");
        });

        modelBuilder.Entity<Inventario>(entity =>
        {
            entity.HasKey(e => e.IdInventario);

            entity.ToTable("INVENTARIOS");

            entity.Property(e => e.IdInventario).HasColumnName("ID_INVENTARIO");
            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");
            entity.Property(e => e.Fecha).HasColumnName("FECHA");
            entity.Property(e => e.IdDetallePedido).HasColumnName("ID_DETALLE_PEDIDO");
            entity.Property(e => e.IdDispensacion).HasColumnName("ID_DISPENSACION");
            entity.Property(e => e.IdFactura).HasColumnName("ID_FACTURA");
            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");
            entity.Property(e => e.IdStock).HasColumnName("ID_STOCK");
            entity.Property(e => e.IdTipoMov).HasColumnName("ID_TIPO_MOV");

            entity.HasOne(d => d.IdStockNavigation).WithMany(p => p.Inventarios)
                .HasForeignKey(d => d.IdStock)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INVENTARIOS_STOCKS");

            entity.HasOne(d => d.IdTipoMovNavigation).WithMany(p => p.Inventarios)
                .HasForeignKey(d => d.IdTipoMov)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INVENTARIOS_TIPOS_MOVIMIENTOS");

            entity.HasOne(d => d.Dispensacione).WithMany(p => p.Inventarios)
                .HasForeignKey(d => new { d.IdFactura, d.IdDispensacion })
                .HasConstraintName("FK_INVENTARIO_FACTURAS");

            entity.HasOne(d => d.DetallesPedido).WithMany(p => p.Inventarios)
                .HasForeignKey(d => new { d.IdPedido, d.IdDetallePedido })
                .HasConstraintName("FK_INVENTARIO_PEDIDOS");
        });

        modelBuilder.Entity<Laboratorio>(entity =>
        {
            entity.HasKey(e => e.IdLaboratorio);

            entity.ToTable("LABORATORIOS");

            entity.Property(e => e.IdLaboratorio)
                .ValueGeneratedNever()
                .HasColumnName("ID_LABORATORIO");
            entity.Property(e => e.NombreLaboratorio)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_LABORATORIO");
        });

        modelBuilder.Entity<Marca>(entity =>
        {
            entity.HasKey(e => e.IdMarca);

            entity.ToTable("MARCAS");

            entity.Property(e => e.IdMarca)
                .ValueGeneratedNever()
                .HasColumnName("ID_MARCA");
            entity.Property(e => e.NombreMarca)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_MARCA");
        });

        modelBuilder.Entity<Medicamento>(entity =>
        {
            entity.HasKey(e => e.IdMedicamento);

            entity.ToTable("MEDICAMENTOS");

            entity.Property(e => e.IdMedicamento)
                .ValueGeneratedNever()
                .HasColumnName("ID_MEDICAMENTO");
            entity.Property(e => e.Activo).HasColumnName("ACTIVO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.IdLaboratorio).HasColumnName("ID_LABORATORIO");
            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.IdMonodroga).HasColumnName("ID_MONODROGA");
            entity.Property(e => e.IdPresentacion).HasColumnName("ID_PRESENTACION");
            entity.Property(e => e.NombreComercial)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_COMERCIAL");
            entity.Property(e => e.Precio)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("PRECIO");
            entity.Property(e => e.VentaLibre).HasColumnName("VENTA_LIBRE");

            entity.HasOne(d => d.IdLaboratorioNavigation).WithMany(p => p.Medicamentos)
                .HasForeignKey(d => d.IdLaboratorio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MEDICAMENTOS_LABORATORIOS");

            entity.HasOne(d => d.IdMarcaNavigation).WithMany(p => p.Medicamentos)
                .HasForeignKey(d => d.IdMarca)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MEDICAMENTOS_MARCAS");

            entity.HasOne(d => d.IdMonodrogaNavigation).WithMany(p => p.Medicamentos)
                .HasForeignKey(d => d.IdMonodroga)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MEDICAMENTOS_MONODROGAS");

            entity.HasOne(d => d.IdPresentacionNavigation).WithMany(p => p.Medicamentos)
                .HasForeignKey(d => d.IdPresentacion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MEDICAMENTOS_PRESENTACIONES");
        });

        modelBuilder.Entity<MedicamentosLote>(entity =>
        {
            entity.HasKey(e => e.IdMedicamentoLote);

            entity.ToTable("MEDICAMENTOS_LOTES");

            entity.Property(e => e.IdMedicamentoLote)
                .ValueGeneratedNever()
                .HasColumnName("ID_MEDICAMENTO_LOTE");
            entity.Property(e => e.FechaVencimiento).HasColumnName("FECHA_VENCIMIENTO");
            entity.Property(e => e.IdMedicamento).HasColumnName("ID_MEDICAMENTO");
            entity.Property(e => e.Lote)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LOTE");
            entity.Property(e => e.Activo).HasColumnName("ACTIVO");

            entity.HasOne(d => d.IdMedicamentoNavigation).WithMany(p => p.MedicamentosLotes)
                .HasForeignKey(d => d.IdMedicamento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MEDICAMENTOS_LOTES_MEDICAMENTOS");
        });

        modelBuilder.Entity<Medico>(entity =>
        {
            entity.HasKey(e => e.Matricula);

            entity.ToTable("MEDICOS");

            entity.Property(e => e.Matricula)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("MATRICULA");
            entity.Property(e => e.Apellido)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APELLIDO");
            entity.Property(e => e.IdTipoEspecialidad).HasColumnName("ID_TIPO_ESPECIALIDAD");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");

            entity.HasOne(d => d.IdTipoEspecialidadNavigation).WithMany(p => p.Medicos)
                .HasForeignKey(d => d.IdTipoEspecialidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MEDICOS_ESPECIALIDADES");
        });

        modelBuilder.Entity<Monodroga>(entity =>
        {
            entity.HasKey(e => e.IdMonodroga);

            entity.ToTable("MONODROGAS");

            entity.Property(e => e.IdMonodroga)
                .ValueGeneratedNever()
                .HasColumnName("ID_MONODROGA");
            entity.Property(e => e.Monodroga1)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MONODROGA");
        });

        modelBuilder.Entity<ObraSocial>(entity =>
        {
            entity.HasKey(e => e.IdObraSocial);

            entity.ToTable("OBRA_SOCIAL");

            entity.Property(e => e.IdObraSocial)
                .ValueGeneratedNever()
                .HasColumnName("ID_OBRA_SOCIAL");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
        });

        modelBuilder.Entity<Pais>(entity =>
        {
            entity.HasKey(e => e.IdPais);

            entity.ToTable("PAISES");

            entity.Property(e => e.IdPais).HasColumnName("ID_PAIS");
            entity.Property(e => e.NombrePais)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PAIS");
        });

        modelBuilder.Entity<Pedido>(entity =>
        {
            entity.HasKey(e => e.IdPedido);

            entity.ToTable("PEDIDOS");

            entity.Property(e => e.IdPedido)
                .ValueGeneratedNever()
                .HasColumnName("ID_PEDIDO");
            entity.Property(e => e.Fecha).HasColumnName("FECHA");
            entity.Property(e => e.IdLogistica)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ID_LOGISTICA");
            entity.Property(e => e.IdPersonalCargosEstablecimientos).HasColumnName("ID_PERSONAL_CARGOS_ESTABLECIMIENTOS");

            entity.HasOne(d => d.IdLogisticaNavigation).WithMany(p => p.Pedidos)
                .HasForeignKey(d => d.IdLogistica)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDOS_EMPRESA_LOGISTICA");

            entity.HasOne(d => d.IdPersonalCargosEstablecimientosNavigation).WithMany(p => p.Pedidos)
                .HasForeignKey(d => d.IdPersonalCargosEstablecimientos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDOS_PERSONAL_CARGOS_ESTABLECIMIENTOS");
        });

        modelBuilder.Entity<Personal>(entity =>
        {
            entity.HasKey(e => e.IdPersonal);

            entity.ToTable("PERSONAL");

            entity.Property(e => e.IdPersonal)
                .ValueGeneratedNever()
                .HasColumnName("ID_PERSONAL");
            entity.Property(e => e.Apellido)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APELLIDO");
            entity.Property(e => e.Calle)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CALLE");
            entity.Property(e => e.FechaNac).HasColumnName("FECHA_NAC");
            entity.Property(e => e.IdBarrio).HasColumnName("ID_BARRIO");
            entity.Property(e => e.IdGenero).HasColumnName("ID_GENERO");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.NroDoc)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_DOC");
            entity.Property(e => e.Numero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("NUMERO");
            entity.Property(e => e.TipoDoc).HasColumnName("TIPO_DOC");
            entity.Property(e => e.Psw)
            .HasMaxLength(15)
            .HasColumnName("PSW");

            entity.HasOne(d => d.IdBarrioNavigation).WithMany(p => p.Personals)
                .HasForeignKey(d => d.IdBarrio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PERSONAL_BARRIOS");

            entity.HasOne(d => d.IdGeneroNavigation).WithMany(p => p.Personals)
                .HasForeignKey(d => d.IdGenero)
                .HasConstraintName("FK_PERSONAL_GENEROS");

            entity.HasOne(d => d.TipoDocNavigation).WithMany(p => p.Personals)
                .HasForeignKey(d => d.TipoDoc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PERSONAL_TIPO_DOC");
        });

        modelBuilder.Entity<PersonalCargosEstablecimiento>(entity =>
        {
            entity.HasKey(e => e.IdPersonalCargosEstablecimientos);

            entity.ToTable("PERSONAL_CARGOS_ESTABLECIMIENTOS");

            entity.Property(e => e.IdPersonalCargosEstablecimientos)
                .ValueGeneratedNever()
                .HasColumnName("ID_PERSONAL_CARGOS_ESTABLECIMIENTOS");
            entity.Property(e => e.IdCargo).HasColumnName("ID_CARGO");
            entity.Property(e => e.IdEstablecimiento).HasColumnName("ID_ESTABLECIMIENTO");
            entity.Property(e => e.IdPersonal).HasColumnName("ID_PERSONAL");

            entity.HasOne(d => d.IdCargoNavigation).WithMany(p => p.PersonalCargosEstablecimientos)
                .HasForeignKey(d => d.IdCargo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PERSONAL_CARGOS_ESTABLECIMIENTOS_CARGOS");

            entity.HasOne(d => d.IdEstablecimientoNavigation).WithMany(p => p.PersonalCargosEstablecimientos)
                .HasForeignKey(d => d.IdEstablecimiento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PERSONAL_CARGOS_ESTABLECIMIENTOS_ESTABLECIMIENTOS");

            entity.HasOne(d => d.IdPersonalNavigation).WithMany(p => p.PersonalCargosEstablecimientos)
                .HasForeignKey(d => d.IdPersonal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PERSONAL_CARGOS_ESTABLECIMIENTOS_PERSONAL");
        });

        modelBuilder.Entity<Presentacion>(entity =>
        {
            entity.HasKey(e => e.IdPresentacion);

            entity.ToTable("PRESENTACIONES");

            entity.Property(e => e.IdPresentacion)
                .ValueGeneratedNever()
                .HasColumnName("ID_PRESENTACION");
            entity.Property(e => e.NombrePresentacion)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PRESENTACION");
        });

        modelBuilder.Entity<Producto>(entity =>
        {
            entity.HasKey(e => e.IdProducto);

            entity.ToTable("PRODUCTOS");

            entity.Property(e => e.IdProducto)
                .ValueGeneratedNever()
                .HasColumnName("ID_PRODUCTO");
            entity.Property(e => e.Activo).HasColumnName("ACTIVO");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.IdMarca).HasColumnName("ID_MARCA");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.Precio)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("PRECIO");
            entity.Property(e => e.TipoProducto).HasColumnName("TIPO_PRODUCTO");

            entity.HasOne(d => d.IdMarcaNavigation).WithMany(p => p.Productos)
                .HasForeignKey(d => d.IdMarca)
                .HasConstraintName("FK_PRODUCTOS_MARCAS");

            entity.HasOne(d => d.TipoProductoNavigation).WithMany(p => p.Productos)
                .HasForeignKey(d => d.TipoProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTOS_TIPOS_PRODUCTOS");
        });

        modelBuilder.Entity<Proveedor>(entity =>
        {
            entity.HasKey(e => e.IdProveedor);

            entity.ToTable("PROVEEDORES");

            entity.Property(e => e.IdProveedor)
                .ValueGeneratedNever()
                .HasColumnName("ID_PROVEEDOR");
            entity.Property(e => e.Activo).HasColumnName("ACTIVO");
            entity.Property(e => e.Calle)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CALLE");
            entity.Property(e => e.Cuit)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CUIT");
            entity.Property(e => e.IdBarrio).HasColumnName("ID_BARRIO");
            entity.Property(e => e.Numero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("NUMERO");
            entity.Property(e => e.RazonSocial)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("RAZON_SOCIAL");

            entity.HasOne(d => d.IdBarrioNavigation).WithMany(p => p.Proveedores)
                .HasForeignKey(d => d.IdBarrio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROVEEDORES_BARRIOS");
        });

        modelBuilder.Entity<Provincia>(entity =>
        {
            entity.HasKey(e => e.IdProvincia);

            entity.ToTable("PROVINCIAS");

            entity.Property(e => e.IdProvincia).HasColumnName("ID_PROVINCIA");
            entity.Property(e => e.IdPais).HasColumnName("ID_PAIS");
            entity.Property(e => e.Provincia1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PROVINCIA");

            entity.HasOne(d => d.IdPaisNavigation).WithMany(p => p.Provincia)
                .HasForeignKey(d => d.IdPais)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROVINCIAS_PAISES");
        });

        modelBuilder.Entity<Stock>(entity =>
        {
            entity.HasKey(e => e.IdStock);

            entity.ToTable("STOCKS");

            entity.Property(e => e.IdStock)
                .ValueGeneratedNever()
                .HasColumnName("ID_STOCK");
            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");
            entity.Property(e => e.CantidadMinima).HasColumnName("CANTIDAD_MINIMA");
            entity.Property(e => e.Fecha).HasColumnName("FECHA");
            entity.Property(e => e.IdEstablecimiento).HasColumnName("ID_ESTABLECIMIENTO");
            entity.Property(e => e.IdMedicamentoLote).HasColumnName("ID_MEDICAMENTO_LOTE");
            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.HasOne(d => d.IdEstablecimientoNavigation).WithMany(p => p.Stocks)
                .HasForeignKey(d => d.IdEstablecimiento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCKS_ESTABLECIMIENTOS");

            entity.HasOne(d => d.IdMedicamentoLoteNavigation).WithMany(p => p.Stocks)
                .HasForeignKey(d => d.IdMedicamentoLote)
                .HasConstraintName("FK_STOCKS_MEDICAMENTOS_LOTE");

            entity.HasOne(d => d.IdProductoNavigation).WithMany(p => p.Stocks)
                .HasForeignKey(d => d.IdProducto)
                .HasConstraintName("FK_STOCKS_PRODUCTOS");
        });

        modelBuilder.Entity<TiposCobertura>(entity =>
        {
            entity.HasKey(e => e.IdTipoCobertura);

            entity.ToTable("TIPOS_COBERTURAS");

            entity.Property(e => e.IdTipoCobertura)
                .ValueGeneratedNever()
                .HasColumnName("ID_TIPO_COBERTURA");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
            entity.Property(e => e.Descuento)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("DESCUENTO");
            entity.Property(e => e.IdObraSocial).HasColumnName("ID_OBRA_SOCIAL");

            entity.HasOne(d => d.IdObraSocialNavigation).WithMany(p => p.TiposCoberturas)
                .HasForeignKey(d => d.IdObraSocial)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIPOS_COBERTURAS_OBRA_SOCIAL");
        });

        modelBuilder.Entity<TiposContacto>(entity =>
        {
            entity.HasKey(e => e.IdTipoContacto);

            entity.ToTable("TIPOS_CONTACTOS");

            entity.Property(e => e.IdTipoContacto).HasColumnName("ID_TIPO_CONTACTO");
            entity.Property(e => e.TipoContacto)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TIPO_CONTACTO");
        });

        modelBuilder.Entity<TiposDocumento>(entity =>
        {
            entity.HasKey(e => e.IdTipoDoc).HasName("PK_TIPOS_DOC");

            entity.ToTable("TIPOS_DOCUMENTOS");

            entity.Property(e => e.IdTipoDoc).HasColumnName("ID_TIPO_DOC");
            entity.Property(e => e.TipoDocumento)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TIPO_DOCUMENTO");
        });

        modelBuilder.Entity<TiposGenero>(entity =>
        {
            entity.HasKey(e => e.IdGenero).HasName("PK_GENEROS");

            entity.ToTable("TIPOS_GENEROS");

            entity.Property(e => e.IdGenero)
                .ValueGeneratedNever()
                .HasColumnName("ID_GENERO");
            entity.Property(e => e.NombreGenero)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_GENERO");
        });

        modelBuilder.Entity<TiposMovimiento>(entity =>
        {
            entity.HasKey(e => e.IdTipoMov);

            entity.ToTable("TIPOS_MOVIMIENTOS");

            entity.Property(e => e.IdTipoMov)
                .ValueGeneratedNever()
                .HasColumnName("ID_TIPO_MOV");
            entity.Property(e => e.Modificador).HasColumnName("MODIFICADOR");
            entity.Property(e => e.Movimiento)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MOVIMIENTO");
        });

        modelBuilder.Entity<TiposPago>(entity =>
        {
            entity.HasKey(e => e.IdTipoPago);

            entity.ToTable("TIPOS_PAGOS");

            entity.Property(e => e.IdTipoPago).HasColumnName("ID_TIPO_PAGO");
            entity.Property(e => e.Descuento)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("DESCUENTO");
            entity.Property(e => e.TipoPago)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TIPO_PAGO");
        });

        modelBuilder.Entity<TiposProducto>(entity =>
        {
            entity.HasKey(e => e.IdTipoProducto);

            entity.ToTable("TIPOS_PRODUCTOS");

            entity.Property(e => e.IdTipoProducto)
                .ValueGeneratedNever()
                .HasColumnName("ID_TIPO_PRODUCTO");
            entity.Property(e => e.TipoProducto)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TIPO_PRODUCTO");
        });

        modelBuilder.Entity<VReporteMensualObraSocial>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_REPORTE_MENSUAL_OBRA_SOCIAL");

            entity.Property(e => e.ImporteAReintegrar)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("Importe_a_reintegrar");
            entity.Property(e => e.ObraSocial)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Obra_Social");
        });

        modelBuilder.Entity<VTotalesFacturadosFarmacia>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_TOTALES_FACTURADOS_FARMACIAS");

            entity.Property(e => e.Establecimiento)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IdEstablecimiento).HasColumnName("ID_ESTABLECIMIENTO");
            entity.Property(e => e.MejorAñoFacturado)
                .HasMaxLength(4000)
                .HasColumnName("Mejor_año_facturado");
            entity.Property(e => e.TotalFacturado)
                .HasMaxLength(4000)
                .HasColumnName("Total_facturado");
        });

        modelBuilder.Entity<VTotalesFacturadosVendedore>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("V_TOTALES_FACTURADOS_VENDEDORES");

            entity.Property(e => e.Año).HasColumnName("AÑO");
            entity.Property(e => e.IdPersonal).HasColumnName("ID_PERSONAL");
            entity.Property(e => e.Mes).HasColumnName("MES");
            entity.Property(e => e.Personal)
                .IsRequired()
                .HasMaxLength(102)
                .IsUnicode(false)
                .HasColumnName("PERSONAL");
            entity.Property(e => e.TotalFacturado)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("TOTAL_FACTURADO");
            entity.Property(e => e.VentaMasCara)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("VENTA_MAS_CARA");
        });




        modelBuilder.Entity<SPTotalesFarmacia>().HasNoKey();
        modelBuilder.Entity<SPReporteMensualCobertura>().HasNoKey();
        modelBuilder.Entity<SPReportemensualObraSocial>().HasNoKey();
        modelBuilder.Entity<SPMayoresCompras>().HasNoKey();
 



    OnModelCreatingPartial(modelBuilder);


    }


    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}